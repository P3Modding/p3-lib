use log::LevelFilter;
use p3_rou::read_rou;

const A_ROU: &[u8; 2 * 220] = &[
    0x00, 0x00, 0x06, 0x04, 0x03, 0x13, 0x08, 0x02, 0x00, 0x11, 0x05, 0x0c, 0x0d, 0x01, 0x10, 0x0f, 0x12, 0x04, 0x09, 0x06, 0x0b, 0x0a, 0x07, 0x0e, 0x15, 0x17,
    0x16, 0x14, 0x6e, 0x00, 0x00, 0x00, 0xbd, 0x03, 0x00, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x6e, 0x00, 0x00, 0x00,
    0x17, 0x01, 0x00, 0x00, 0xdc, 0x00, 0x00, 0x00, 0xce, 0x00, 0x00, 0x00, 0xa4, 0x02, 0x00, 0x00, 0x52, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00, 0xff, 0x00,
    0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x70, 0x03, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00, 0x70, 0x03, 0x00, 0x00, 0xb8, 0x01, 0x00, 0x00, 0xaa, 0x00, 0x00, 0x00,
    0x4f, 0x00, 0x00, 0x00, 0xd0, 0x07, 0x00, 0x00, 0x40, 0x06, 0x00, 0x00, 0x60, 0x09, 0x00, 0x00, 0xf0, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x03, 0x13, 0x08, 0x02, 0x00, 0x11, 0x05, 0x0c, 0x0d, 0x01,
    0x10, 0x0f, 0x12, 0x04, 0x09, 0x06, 0x0b, 0x0a, 0x07, 0x0e, 0x15, 0x17, 0x16, 0x14, 0x6e, 0x00, 0x00, 0x00, 0xbd, 0x03, 0x00, 0x00, 0xb8, 0x01, 0x00, 0x00,
    0x22, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x6e, 0x00, 0x00, 0x00, 0x17, 0x01, 0x00, 0x00, 0xdc, 0x00, 0x00, 0x00, 0xce, 0x00, 0x00, 0x00, 0xa4, 0x02,
    0x00, 0x00, 0x52, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x70, 0x03, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00,
    0x70, 0x03, 0x00, 0x00, 0xb8, 0x01, 0x00, 0x00, 0xaa, 0x00, 0x00, 0x00, 0x4f, 0x00, 0x00, 0x00, 0xd0, 0x07, 0x00, 0x00, 0x40, 0x06, 0x00, 0x00, 0x60, 0x09,
    0x00, 0x00, 0xf0, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
];
#[test]
fn simple_route() {
    simple_logger::SimpleLogger::new().with_level(LevelFilter::Debug).env().init().unwrap();
    let data = read_rou("tests/a.rou");
    assert_eq!(&data, A_ROU);
    assert_eq!(data[0x02], 0x06);
    assert_eq!(data[0x02 + 220], 0x07);
}
